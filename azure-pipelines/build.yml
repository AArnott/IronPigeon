parameters:
  windowsPool: Hosted Windows 2019 with VS2019

jobs:
- job: Windows
  pool: ${{ parameters.windowsPool }}
  variables:
    BuildPlatform: Any CPU
    TestFilter: ""
  steps:
  - checkout: self
    clean: true
  - template: install-dependencies.yml

  - powershell: '& (./azure-pipelines/Get-nbgv.ps1) cloud'
    displayName: Set build number

  - pwsh: ./tools/Emulators.ps1
    displayName: Start storage emulators

  - template: dotnet.yml

- job: Linux
  pool:
    vmImage: Ubuntu 18.04
  variables:
    BuildPlatform: Non_Windows
    TestFilter: "&RequiresTableStorage!=true" # table storage emulator is not available off Windows
  steps:
  - checkout: self
    clean: true
  - template: install-dependencies.yml
  - bash: ./tools/Emulators.sh &
    displayName: Start storage emulators
  - template: dotnet.yml
    parameters:
      test_secrets:
        CosmosDBConnectionString: $(CosmosDBConnectionString)

  - task: DotNetCoreCLI@2
    displayName: dotnet publish
    inputs:
      command: publish
      arguments: --no-build -c $(BuildConfiguration)
      workingDirectory: src/IronPigeon.Relay
  - task: DockerInstaller@0
    inputs:
      dockerVersion: 17.09.0-ce
  - task: Docker@2
    displayName: docker build
    inputs:
      containerRegistry: $(acr)
      command: build
      Dockerfile: src/IronPigeon.Relay/Dockerfile
      buildContext: $(Build.SourcesDirectory)
      tags: $(Build.BuildNumber)
  - task: Docker@2
    displayName: docker push
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      containerRegistry: $(acr)
      command: push
      Dockerfile: src/IronPigeon.Relay/Dockerfile
      buildContext: $(Build.SourcesDirectory)
      tags: |
        latest
        $(Build.BuildNumber)

- job: macOS
  condition: false
  pool:
    vmImage: macOS-10.15
  variables:
    BuildPlatform: Non_Windows
    TestFilter: "&RequiresTableStorage!=true" # table storage emulator is not available off Windows
  steps:
  - checkout: self
    clean: true
  - template: install-dependencies.yml
  - bash: ./tools/Emulators.sh &
    displayName: Start storage emulators
  - template: dotnet.yml
    parameters:
      test_secrets:
        CosmosDBConnectionString: $(CosmosDBConnectionString)

- job: WrapUp
  dependsOn:
  - Windows
  - Linux
#  - macOS
  pool: ${{ parameters.windowsPool }}
  condition: succeededOrFailed()
  steps:
  - checkout: self
    clean: true
  - template: install-dependencies.yml
    parameters:
      initArgs: -NoRestore
  - template: publish-codecoverage.yml
  - template: publish-deployables.yml
